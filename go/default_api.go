/*
 * star world API
 *
 * the api to query the information about *Star War* you can check all the Star Wars data you've ever wanted Planets Spaceships Vehicles People Films and Species From all SEVEN Star Wars films
 *
 * API version: 0.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package swagger

import (
	"net/http"
	"strings"

	db "github.com/S-Vanguard/StarWar_Server/db"
)

func FilmsGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func FilmsIdGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	id := strings.Trim(r.URL.Path, "/films/")
	json := db.GetFilmByID(id)
	if json == "" {
		w.WriteHeader(http.StatusNotFound)
		w.Write([]byte("404 Not found"))
	} else {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte(json))
	}
}

func PeopleGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func PeopleIdGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	id := strings.Trim(r.URL.Path, "/people/")
	json := db.GetPeopleByID(id)
	if json == "" {
		w.WriteHeader(http.StatusNotFound)
		w.Write([]byte("404 Not found"))
	} else {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte(json))
	}
}

func PlanetsGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func PlanetsIdGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	id := strings.Trim(r.URL.Path, "/planets/")
	json := db.GetPlanetByID(id)
	if json == "" {
		w.WriteHeader(http.StatusNotFound)
		w.Write([]byte("404 Not found"))
	} else {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte(json))
	}
}

func SpeciesGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func SpeciesIdGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	id := strings.Trim(r.URL.Path, "/species/")
	json := db.GetSpeciesByID(id)
	if json == "" {
		w.WriteHeader(http.StatusNotFound)
		w.Write([]byte("404 Not found"))
	} else {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte(json))
	}
}

func StarshipsGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func StarshipsIdGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	id := strings.Trim(r.URL.Path, "/starships/")
	json := db.GetStarshipByID(id)
	if json == "" {
		w.WriteHeader(http.StatusNotFound)
		w.Write([]byte("404 Not found"))
	} else {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte(json))
	}
}

func VehiclesGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func VehiclesIdGet(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	id := strings.Trim(r.URL.Path, "/vehicles/")
	json := db.GetVehicleByID(id)
	if json == "" {
		w.WriteHeader(http.StatusNotFound)
		w.Write([]byte("404 Not found"))
	} else {
		w.WriteHeader(http.StatusOK)
		w.Write([]byte(json))
	}
}

func UserLogoutPost(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func UserSignInPost(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func UserSignUpPost(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

func UserUpdatePost(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}
